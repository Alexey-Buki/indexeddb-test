{"version":3,"sources":["indexedDbStorage.js","App.js","serviceWorker.js","index.js"],"names":["indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","connect","name","version","Promise","resolve","reject","DBOpenRequest","open","addEventListener","args","console","warn","event","result","db","target","error","alert","createObjectStore","keyPath","autoIncrement","createIndex","write","blob","a","id","log","transaction","objectStore","objectStoreRequest","put","read","file","get","getAll","files","storeGetAll","putFile","Blob","size","Error","getFiles","App","useState","setFiles","useEffect","then","className","map","key","type","onChange","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bdd023e8.chunk.js","sourcesContent":["// const supportStabilityIndexedDb = !!window.indexedDB;\nconst indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n// const notSupportIndexedbDb = !!indexedDB;\nconst IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;\n// const IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n\nconst READ_WRITE = 'readwrite';\nconst READ_ONLY = 'readonly';\n\nconst objectStoreName = 'file_storage';\n\nfunction connect(name, version) {\n\n  return new Promise((resolve, reject) => {\n    const DBOpenRequest = indexedDB.open(name, version);\n\n    DBOpenRequest.addEventListener('blocked', (...args) => {\n      console.warn('blobcked', args);\n    });\n\n    DBOpenRequest.addEventListener('error', (event) => {\n      reject();\n    });\n    \n    DBOpenRequest.addEventListener('success', (event) => {\n      resolve(DBOpenRequest.result);\n    });\n\n    DBOpenRequest.addEventListener('upgradeneeded', (event) => {\n      var db = event.target.result;\n    \n      db.addEventListener('error', () => {\n        reject();\n      })\n\n      db.addEventListener('close', function (event) {\n        console.error(event);\n        alert('close');\n      })\n    \n      var objectStore = db.createObjectStore(objectStoreName, { keyPath: \"id\", autoIncrement: true });\n      objectStore.createIndex(\"id\", \"id\");\n    });\n  })\n}\n\n/**\n * @param {IDBDatabase} db\n * @param {Blob} blob\n */\nasync function write(db, blob) {\n\n  return new Promise(function (resolve, reject) {\n    let id = null;\n    console.log('start write transaction');\n    const transaction = db.transaction([objectStoreName], READ_WRITE);\n\n    transaction.addEventListener('abort', function (event) {\n      console.error('an abort transaction write', event, transaction);\n      reject(event);\n    })\n\n    transaction.addEventListener('error', function (event) {\n      console.error('an error transaction write', event, transaction);\n      reject(event);\n    })\n\n    transaction.addEventListener('complete', function (event) {\n      console.log('complete transaction', event, transaction);\n      resolve(id);\n    })\n\n    const objectStore = transaction.objectStore(objectStoreName);\n\n    console.log('put file', blob);\n    const objectStoreRequest = objectStore.put(blob);\n\n    objectStoreRequest.addEventListener('success', function (event) {\n      id = objectStoreRequest.result;\n      console.log('id = ' + id);\n      console.log('write: object store request success', event, objectStoreRequest, objectStore);\n    })\n\n    objectStoreRequest.addEventListener('error', function (event) {\n      console.error('write: object store request error', event, objectStoreRequest, objectStore );\n    })\n  })\n}\n\n/**\n * @param {IDBDatabase} db\n * @param {number} id\n */\nfunction read(db, id) {\n\n  return new Promise(function (resolve, reject) {\n    let file = null;\n    console.log('start read transaction');\n    const transaction = db.transaction([objectStoreName], READ_ONLY);\n\n    transaction.addEventListener('abort', function (event) {\n      console.error('an abort transaction read', event, transaction);\n      reject(event);\n    })\n\n    transaction.addEventListener('error', function (event) {\n      console.error('an error transaction read', event, transaction);\n      reject(event);\n    })\n\n    transaction.addEventListener('complete', function (event) {\n      console.log('complete read transaction', event, transaction);\n      resolve(file);\n    })\n\n    const objectStore = transaction.objectStore(objectStoreName);\n    \n    console.log('get file', id);\n    const objectStoreRequest = objectStore.get(id);\n\n    objectStoreRequest.addEventListener('success', function (event) {\n      file = objectStoreRequest.result;\n      console.log('read: object store request success', event, objectStoreRequest, objectStore);\n    })\n\n    objectStoreRequest.addEventListener('error', function (event) {\n      console.error('read: object store request error', event, objectStoreRequest, objectStore );\n    })\n  })\n}\n\n/**\n * @param {IDBDatabase} db\n */\nfunction getAll(db) {\n  return new Promise(function(resolve, reject) {\n    let files = [];\n    console.log('start read all transaction');\n    const transaction = db.transaction([objectStoreName], READ_ONLY);\n\n    transaction.addEventListener('abort', function (event) {\n      console.error('an abort transaction read all', event, transaction);\n      reject(event);\n    })\n\n    transaction.addEventListener('error', function (event) {\n      console.error('an error transaction read all', event, transaction);\n      reject(event);\n    })\n\n    transaction.addEventListener('complete', function (event) {\n      console.log('complete read all transaction', event, transaction);\n      resolve(files);\n    })\n\n    const objectStore = transaction.objectStore(objectStoreName);\n    const storeGetAll = objectStore.getAll();\n\n    storeGetAll.addEventListener('success', function (event) {\n      console.log('request get all', event);\n      files = storeGetAll.result;\n    })\n\n    storeGetAll.addEventListener('error', function (event) {\n      console.error('error request get all', event);\n      reject(event);\n    })\n  })\n}\n\nconst name = 'test';\nconst version = 1;\n\nasync function putFile(blob) {\n  const db = await connect(name, version);\n  const id = await write(db, blob);\n  const readableBlob = await read(db, id);\n\n  if (!(readableBlob instanceof Blob) || blob.size === 0) {\n    throw new Error('can not save file');\n  }\n  return id;\n}\n\nasync function getFile(id) {\n  const db = await connect(name, version);\n  const readableBlob = await read(db, id);\n\n  if (!(readableBlob instanceof Blob) || readableBlob.size === 0) {\n    throw new Error('can not read file');\n  }\n  return readableBlob;\n}\n\nasync function getFiles() {\n  const db = await connect(name, version);\n  return getAll(db);\n}\n\nexport {\n  putFile,\n  getFile,\n  getFiles\n};","import React, {useState, useEffect} from 'react';\nimport {putFile, getFiles} from './indexedDbStorage';\nimport './App.css';\n\nfunction App() {\n  const [files, setFiles] = useState([]);\n\n  useEffect( () => {\n    getFiles().then(function (files) {\n      setFiles(files);\n    });\n  }, [])\n\n  async function handleFile(event) {\n    const file = event.target.files[0];\n    try {\n      await putFile(file);\n      setFiles(await getFiles());\n    } catch(error) {\n      console.error(error);\n    }\n  }\n\n  console.log(files);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <ul>\n          {files.map((file) => {\n            return <li key={file.id}>{file.name}</li>\n          })}\n        </ul>\n      </div>\n      <div>\n        <label>Input file: </label>\n        <input type=\"file\" onChange={handleFile} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}